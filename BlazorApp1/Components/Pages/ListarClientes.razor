@page "/listar"
@rendermode InteractiveServer
@using BlazorApp1.Data
@using BlazorApp1.Models
@inject AppDbContext DbContext
@using Microsoft.EntityFrameworkCore

@if (!string.IsNullOrEmpty(mensagem))
{
    <div class="alert alert-success" role="alert">
        @mensagem
    </div>
}

<div class="container mt-5">
    <div class="card shadow p-4 mx-auto" style="max-width: 1000px;">
        <h3 class="card-title text-center mb-4">Listar Clientes</h3>

        @if (clientes == null)
        {
            <p>Carregando...</p>
        }
        else if (!clientes.Any())
        {
            <p>Nenhum cliente cadastrado.</p>
        }
        else
        {
            <table class="table table-striped table-hover table-bordered align-middle">
                <thead class="table-light">
                    <tr>
                        <th>Nome</th>
                        <th>Email</th>
                        <th>Telefone</th>
                        <th>Exluir / Editar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var c in clientes)
                    {
                        <tr>
                            <td>@c.Nome</td>
                            <td>@c.Email</td>
                            <td>@c.Telefone</td>
                            <td>
                                <div class="d-flex justify-content-center">
                                    <button class="btn btn-danger btn-sm me-2" title="Excluir" @onclick="() => ExcluirCliente(c.Id)">
                                    <span class="bi bi-trash-fill"></span>
                                    </button>
                                    <NavLink class="btn btn-primary btn-sm" title="Editar" href="@($"/editar/{c.Id}")">
                                    <span class="bi bi-pencil-fill"></span>
                                    </NavLink>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code
{
    private List<Cliente>? clientes;
    private string mensagem;
    protected override async Task OnInitializedAsync()
    {
        clientes = await DbContext.Clientes.ToListAsync();
    }

     private async Task ExcluirCliente(int id)
    {
        var excluirCliente = await DbContext.Clientes.FindAsync(id);
        if (excluirCliente != null)
        {
            DbContext.Clientes.Remove(excluirCliente);
            await DbContext.SaveChangesAsync();
            clientes.Remove(excluirCliente); // Atualiza a lista local para não precisar recarregar tudo
            
            mensagem = $"Cliente '{excluirCliente.Nome}' excluído com sucesso!";
            StateHasChanged();

            // Mensagem some após 3 segundos
            await Task.Delay(3000);
            mensagem = null;
            StateHasChanged();
        }
    }
}
